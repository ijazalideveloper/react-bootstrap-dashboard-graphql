{"ast":null,"code":"import HTTPClient from \"./http.services\";\n\nclass FoodService {\n  getAllFoods(search, page, limit = 10) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/foods?page=\" + page + \"&limit=\" + limit + \"&search=\" + search).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  addFood(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/foods\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  delFood(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/foods/delete\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  updateFood(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/foods/edit\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getFoodById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/foods/\" + id).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n}\n\nexport default new FoodService();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/foods.service.js"],"names":["HTTPClient","FoodService","getAllFoods","search","page","limit","Promise","resolve","reject","get","then","response","data","catch","err","addFood","obj","post","delFood","updateFood","getFoodById","id"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAK,GAAG,EAAvB,EAA2B;AACpC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACS,GAAX,CACE,iBAAiBL,IAAjB,GAAwB,SAAxB,GAAoCC,KAApC,GAA4C,UAA5C,GAAyDF,MAD3D,EAGGO,IAHH,CAGSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OALH,EAMGC,KANH,CAMUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OARH;AASD,KAVM,CAAP;AAWD;;AACDC,EAAAA,OAAO,CAACC,GAAD,EAAM;AACX,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACiB,IAAX,CAAgB,QAAhB,EAA0BD,GAA1B,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDI,EAAAA,OAAO,CAACF,GAAD,EAAM;AACX,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACiB,IAAX,CAAgB,eAAhB,EAAiCD,GAAjC,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDK,EAAAA,UAAU,CAACH,GAAD,EAAM;AACd,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACiB,IAAX,CAAgB,aAAhB,EAA+BD,GAA/B,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDM,EAAAA,WAAW,CAACC,EAAD,EAAK;AACd,WAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACS,GAAX,CAAe,YAAYY,EAA3B,EACGX,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AA1De;;AA6DlB,eAAe,IAAIb,WAAJ,EAAf","sourcesContent":["import HTTPClient from \"./http.services\";\n\nclass FoodService {\n  getAllFoods(search, page, limit = 10) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\n        \"/foods?page=\" + page + \"&limit=\" + limit + \"&search=\" + search\n      )\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  addFood(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/foods\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  delFood(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/foods/delete\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  updateFood(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/foods/edit\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  getFoodById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/foods/\" + id)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nexport default new FoodService();\n"]},"metadata":{},"sourceType":"module"}