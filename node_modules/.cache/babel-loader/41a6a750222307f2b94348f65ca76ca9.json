{"ast":null,"code":"import HTTPClient from \"./http.services\";\n\nclass SubscriptionService {\n  getActivePlans() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/v1/plans/getactive\").then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getActivePaymentMethods() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/v1/payments/getactivemethod\").then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getActiveSubscription(userId) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/v1/subscriptions/users/\" + userId + \"/active?transactions=true\").then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getAllSubscriptions(userId, page) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/v1/subscriptions/users/\" + userId + \"/all?page=\" + page).then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  updateSubscriptionStatus(subId, state) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/v1/subscriptions/\" + subId + \"/update\", {\n        'status': state\n      }).then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  addSubscription(requestData) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/v1/subscriptions/add\", requestData).then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err.response.data.message);\n      });\n    });\n  }\n\n  addSubscriptionPayment(requestData) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/v1/subscriptions/create_payment\", requestData).then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err.response.data.message);\n      });\n    });\n  }\n\n  renewSubscription(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/v1/subscriptions/\" + id + \"/renew\").then(response => {\n        resolve(response.data.data);\n      }).catch(err => {\n        reject(err.response.data.message);\n      });\n    });\n  }\n\n}\n\nexport default new SubscriptionService();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/subscription.service.js"],"names":["HTTPClient","SubscriptionService","getActivePlans","Promise","resolve","reject","get","then","response","data","catch","err","getActivePaymentMethods","getActiveSubscription","userId","getAllSubscriptions","page","updateSubscriptionStatus","subId","state","post","addSubscription","requestData","message","addSubscriptionPayment","renewSubscription","id"],"mappings":"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","sourcesContent":["import HTTPClient from \"./http.services\";\n\nclass SubscriptionService {\n  \n    getActivePlans(  ){\n      return new Promise((resolve, reject) => {\n          HTTPClient.get(\"/v1/plans/getactive\")\n            .then((response) => {\n              resolve(response.data.data );\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        });\n    }\n  \n    getActivePaymentMethods(  ){\n      return new Promise((resolve, reject) => {\n          HTTPClient.get(\"/v1/payments/getactivemethod\")\n            .then((response) => {\n              resolve(response.data.data );\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        });\n    }\n  \n    getActiveSubscription( userId ){\n      return new Promise((resolve, reject) => {\n          HTTPClient.get(\"/v1/subscriptions/users/\"+userId+\"/active?transactions=true\")\n            .then((response) => {\n              resolve(response.data.data );\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        });\n    }\n    \n    getAllSubscriptions( userId, page ){\n      return new Promise((resolve, reject) => {\n          HTTPClient.get(\"/v1/subscriptions/users/\"+userId+\"/all?page=\"+page)\n            .then((response) => {\n              resolve(response.data.data );\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        });\n    }\n    \n    updateSubscriptionStatus ( subId, state  ) {\n      return new Promise((resolve, reject) => {\n        HTTPClient.post(\"/v1/subscriptions/\"+subId+\"/update\", { 'status' : state })\n          .then((response) => {\n            resolve(response.data.data );\n          })\n          .catch((err) => {\n            reject(err);\n          });\n      });\n    }\n\n    addSubscription( requestData  ) {\n      return new Promise((resolve, reject) => {\n        HTTPClient.post(\"/v1/subscriptions/add\", requestData)\n          .then((response) => {\n            resolve(response.data.data );\n          })\n          .catch((err) => {\n            reject(err.response.data.message);\n          });\n      });\n    }\n\n    addSubscriptionPayment( requestData  ) {\n      return new Promise((resolve, reject) => {\n        HTTPClient.post(\"/v1/subscriptions/create_payment\", requestData)\n          .then((response) => {\n            resolve(response.data.data );\n          })\n          .catch((err) => {\n            reject(err.response.data.message);\n          });\n      });\n    }\n\n    renewSubscription( id  ) {\n      return new Promise((resolve, reject) => {\n        HTTPClient.get(\"/v1/subscriptions/\"+id+\"/renew\")\n          .then((response) => {\n            resolve(response.data.data );\n          })\n          .catch((err) => {\n            reject(err.response.data.message);\n          });\n      });\n    }\n\n}\n\nexport default new SubscriptionService();"]},"metadata":{},"sourceType":"module"}