{"ast":null,"code":"import HTTPClient from \"./http.services\";\n\nclass TeamService {\n  getAllTeams() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/teams\").then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getTeamById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/team?id=\" + id).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  updateTeam(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/update/team\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  addTeam(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/add/team\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n}\n\nexport default new TeamService();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/teams.service .js"],"names":["HTTPClient","TeamService","getAllTeams","Promise","resolve","reject","get","then","response","data","catch","err","getTeamById","id","updateTeam","obj","post","addTeam"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AACZ,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACM,GAAX,CAAe,YAAf,EACGC,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACd,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACM,GAAX,CAAe,kBAAkBO,EAAjC,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDG,EAAAA,UAAU,CAACC,GAAD,EAAM;AACd,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACgB,IAAX,CAAgB,cAAhB,EAAgCD,GAAhC,EACGR,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDM,EAAAA,OAAO,CAACF,GAAD,EAAM;AACX,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACgB,IAAX,CAAgB,WAAhB,EAA6BD,GAA7B,EACGR,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AA7Ce;;AAgDlB,eAAe,IAAIV,WAAJ,EAAf","sourcesContent":["import HTTPClient from \"./http.services\";\n\nclass TeamService {\n  getAllTeams() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/teams\")\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  getTeamById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/team?id=\" + id)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  updateTeam(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/update/team\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  addTeam(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/add/team\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nexport default new TeamService();\n"]},"metadata":{},"sourceType":"module"}