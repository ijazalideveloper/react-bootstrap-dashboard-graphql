{"ast":null,"code":"import axios from \"axios\";\nimport CONSTANTS from \"../constants\";\n\nconst requestInterceptor = async request => {\n  let userInfo = await window.localStorage.getItem(\"aimfit-user\");\n\n  if (userInfo) {\n    var _userInfo;\n\n    userInfo = JSON.parse(userInfo);\n    request.headers.Authorization = (_userInfo = userInfo) === null || _userInfo === void 0 ? void 0 : _userInfo.token;\n  }\n\n  request.url = 'https://api.mux.com' + request.url;\n  return request;\n};\n\nconst successInterceptor = response => {// console.log(`Success: ${response}`);\n};\n\nconst errorInterceptor = error => {\n  console.log(`Error: ${error}`);\n};\n\nlet axiosInstance = axios.create();\n\nclass HTTPClientMux {\n  constructor() {\n    axiosInstance.interceptors.request.use(requestInterceptor);\n    axiosInstance.interceptors.response.use(response => {\n      successInterceptor(response);\n      return response;\n    }, error => {\n      errorInterceptor(error);\n\n      if (error.response.status === CONSTANTS.GLOBAL.UNAUTHORIZED) {\n        console.log(\"unauthorized \");\n      }\n\n      return Promise.reject({ ...error\n      });\n    });\n  }\n\n  get(url) {\n    return axiosInstance.get(url).then(response => Promise.resolve(response)).catch(error => Promise.reject(error));\n  }\n\n  post(url, data) {\n    return axiosInstance.post(url, data).then(response => Promise.resolve(response)).catch(error => Promise.reject(error));\n  }\n\n  put(url, data = {}) {\n    return axiosInstance.put(url, data).then(response => Promise.resolve(response)).catch(error => Promise.reject(error));\n  }\n\n  delete(url) {\n    return axiosInstance.delete(url).then(response => Promise.resolve(response)).catch(error => Promise.reject(error));\n  }\n\n}\n\nexport default new HTTPClientMux();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/httpMux.service.js"],"names":["axios","CONSTANTS","requestInterceptor","request","userInfo","window","localStorage","getItem","JSON","parse","headers","Authorization","token","url","successInterceptor","response","errorInterceptor","error","console","log","axiosInstance","create","HTTPClientMux","constructor","interceptors","use","status","GLOBAL","UNAUTHORIZED","Promise","reject","get","then","resolve","catch","post","data","put","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport CONSTANTS from \"../constants\";\nconst requestInterceptor = async (request) => {\n  let userInfo = await window.localStorage.getItem(\"aimfit-user\");\n  if (userInfo) {\n    userInfo = JSON.parse(userInfo);\n    request.headers.Authorization = userInfo?.token;\n  }\n\n  request.url = 'https://api.mux.com' + request.url;\n  return request;\n};\n\nconst successInterceptor = (response) => {\n  // console.log(`Success: ${response}`);\n};\n\nconst errorInterceptor = (error) => {\n  console.log(`Error: ${error}`);\n};\n\nlet axiosInstance = axios.create();\nclass HTTPClientMux {\n    constructor() {\n      axiosInstance.interceptors.request.use(requestInterceptor);\n      axiosInstance.interceptors.response.use(\n        (response) => {\n          successInterceptor(response);\n          return response;\n        },\n        (error) => {\n          errorInterceptor(error);\n          if (error.response.status === CONSTANTS.GLOBAL.UNAUTHORIZED) {\n            console.log(\"unauthorized \");\n          }\n          return Promise.reject({ ...error });\n        }\n      );\n    }\n  \n    get(url) {\n      return axiosInstance\n        .get(url)\n        .then((response) => Promise.resolve(response))\n        .catch((error) => Promise.reject(error));\n    }\n  \n    post(url, data) {\n      return axiosInstance\n        .post(url, data)\n        .then((response) => Promise.resolve(response))\n        .catch((error) => Promise.reject(error));\n    }\n  \n    put(url, data = {}) {\n      return axiosInstance\n        .put(url, data)\n        .then((response) => Promise.resolve(response))\n        .catch((error) => Promise.reject(error));\n    }\n  \n    delete(url) {\n      return axiosInstance\n        .delete(url)\n        .then((response) => Promise.resolve(response))\n        .catch((error) => Promise.reject(error));\n    }\n  }\n  \n  export default new HTTPClientMux();\n  "]},"metadata":{},"sourceType":"module"}