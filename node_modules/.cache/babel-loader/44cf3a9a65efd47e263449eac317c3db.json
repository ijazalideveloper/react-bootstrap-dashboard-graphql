{"ast":null,"code":"import HTTPClient from \"./http.services\";\n\nclass MemberService {\n  getAllMembers(search, page, limit) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/members?search=\" + search + \"&page=\" + page + \"&limit=\" + limit).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  updateMember(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/update/member/admin\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getMemberById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/member?id=\" + id).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  addMember(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/add/member\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  markMemberAttendance(params) {\n    return (async () => {\n      try {\n        let response = await HTTPClient.post('/admin/add/attendance', params);\n        return response;\n      } catch (err) {\n        throw new Error(err);\n      }\n    })();\n  }\n\n}\n\nexport default new MemberService();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/members.service.js"],"names":["HTTPClient","MemberService","getAllMembers","search","page","limit","Promise","resolve","reject","get","then","response","data","catch","err","updateMember","obj","post","getMemberById","id","addMember","markMemberAttendance","params","Error"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,aAAa,CAAEC,MAAF,EAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACS,GAAX,CAAe,yBAAuBN,MAAvB,GAA8B,QAA9B,GAAuCC,IAAvC,GAA4C,SAA5C,GAAsDC,KAArE,EACGK,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDC,EAAAA,YAAY,CAACC,GAAD,EAAM;AAChB,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACiB,IAAX,CAAgB,sBAAhB,EAAwCD,GAAxC,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDI,EAAAA,aAAa,CAACC,EAAD,EAAK;AAChB,WAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACS,GAAX,CAAe,oBAAoBU,EAAnC,EACGT,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDM,EAAAA,SAAS,CAACJ,GAAD,EAAM;AACb,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,UAAU,CAACiB,IAAX,CAAgB,aAAhB,EAA+BD,GAA/B,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDO,EAAAA,oBAAoB,CAACC,MAAD,EAAS;AAE3B,WAAO,CAAC,YAAY;AAClB,UAAI;AACF,YAAIX,QAAQ,GAAG,MAAMX,UAAU,CAACiB,IAAX,CAAgB,uBAAhB,EAAyCK,MAAzC,CAArB;AACA,eAAOX,QAAP;AACD,OAHD,CAGE,OAAMG,GAAN,EAAW;AACX,cAAM,IAAIS,KAAJ,CAAUT,GAAV,CAAN;AACD;AACF,KAPM,GAAP;AAUD;;AA1DiB;;AA6DpB,eAAe,IAAIb,aAAJ,EAAf","sourcesContent":["import HTTPClient from \"./http.services\";\n\nclass MemberService {\n  getAllMembers( search, page, limit) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/members?search=\"+search+\"&page=\"+page+\"&limit=\"+limit)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  updateMember(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/update/member/admin\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  getMemberById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/member?id=\" + id)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  addMember(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/add/member\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  markMemberAttendance(params) {\n    \n    return (async () => {\n      try {\n        let response = await HTTPClient.post('/admin/add/attendance', params);\n        return response;\n      } catch(err) {\n        throw new Error(err)\n      }\n    })();\n\n\n  }\n}\n\nexport default new MemberService();\n"]},"metadata":{},"sourceType":"module"}