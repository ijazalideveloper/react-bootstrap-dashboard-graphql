{"ast":null,"code":"import HTTPClient from \"./http.services\";\n\nclass CategoryService {\n  getAllCategories() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/categories\").then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getCatById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/category?id=\" + id).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  updateCategory(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/update/category\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  addCategory(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/add/category\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  reorderCategories(reorderedList) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.put('/reorder/categories', {\n        items: reorderedList\n      }).then(resp => resolve({\n        response: resp === null || resp === void 0 ? void 0 : resp.data\n      })).catch(err => reject(err));\n    });\n  }\n\n}\n\nexport default new CategoryService();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/categories.service.js"],"names":["HTTPClient","CategoryService","getAllCategories","Promise","resolve","reject","get","then","response","data","catch","err","getCatById","id","updateCategory","obj","post","addCategory","reorderCategories","reorderedList","put","items","resp"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;;AAEA,MAAMC,eAAN,CAAsB;AACpBC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACM,GAAX,CAAe,iBAAf,EACGC,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDC,EAAAA,UAAU,CAACC,EAAD,EAAK;AACb,WAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACM,GAAX,CAAe,sBAAsBO,EAArC,EACGN,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDG,EAAAA,cAAc,CAACC,GAAD,EAAM;AAClB,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACgB,IAAX,CAAgB,kBAAhB,EAAoCD,GAApC,EACGR,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AACDM,EAAAA,WAAW,CAACF,GAAD,EAAM;AACf,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACgB,IAAX,CAAgB,eAAhB,EAAiCD,GAAjC,EACGR,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDO,EAAAA,iBAAiB,CAACC,aAAD,EAAgB;AAC/B,WAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,UAAU,CAACoB,GAAX,CAAe,qBAAf,EAAsC;AAACC,QAAAA,KAAK,EAAEF;AAAR,OAAtC,EACGZ,IADH,CACSe,IAAD,IAAUlB,OAAO,CAAC;AAAEI,QAAAA,QAAQ,EAAEc,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEb;AAAlB,OAAD,CADzB,EAEGC,KAFH,CAEUC,GAAD,IAASN,MAAM,CAACM,GAAD,CAFxB;AAGD,KAJM,CAAP;AAKD;;AApDmB;;AAuDtB,eAAe,IAAIV,eAAJ,EAAf","sourcesContent":["import HTTPClient from \"./http.services\";\n\nclass CategoryService {\n  getAllCategories() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/categories\")\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  getCatById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/get/category?id=\" + id)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  updateCategory(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/update/category\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n  addCategory(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/add/category\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  reorderCategories(reorderedList) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.put('/reorder/categories', {items: reorderedList})\n        .then((resp) => resolve({ response: resp?.data }))\n        .catch((err) => reject(err));\n    });\n  }\n}\n\nexport default new CategoryService();\n"]},"metadata":{},"sourceType":"module"}