{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/views/Recipes/Ingredients.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport services from \"services\";\nimport { useToast } from \"components/Toast\";\nexport default function Ingredients(props) {\n  _s();\n\n  const {\n    ingredients,\n    setFieldValue\n  } = props;\n  const toast = useToast();\n  const [quantity, setQuantity] = useState();\n  const [name, setName] = useState();\n\n  const saveIngredient = () => {\n    if (!quantity || !name) {\n      toast.add(\"tr\", \"danger\", \"Add recipe quantity and name first\");\n      return;\n    }\n\n    let newIngredient = {\n      name: name,\n      quantity: quantity\n    };\n    let allIngredients = ingredients ? ingredients : [];\n    allIngredients = [...allIngredients, newIngredient];\n    console.log(allIngredients);\n    setFieldValue(\"ingredients\", allIngredients);\n    setQuantity(\"\");\n    setName(\"\");\n  };\n\n  const handleDelete = index => {\n    let splicedIngredients = ingredients.filter((item, i) => i !== index);\n    setFieldValue(\"ingredients\", splicedIngredients);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" ingredients-form-control d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Quantity\",\n        name: \"quantity\",\n        className: \"quantity\",\n        type: \"text\",\n        onChange: e => setQuantity(e.target.value),\n        value: quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Name\",\n        name: \"ingredient\",\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: saveIngredient,\n        className: \"btn btn-success btn-wd\",\n        children: \"Add Ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), ingredients === null || ingredients === void 0 ? void 0 : ingredients.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipe-tag-item mt-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"step\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          style: {\n            color: \"#253b02\"\n          },\n          children: [item.quantity, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), \" \", item.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        type: \"button\",\n        className: \"button\",\n        onClick: () => handleDelete(i),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Ingredients, \"Ew/zrGKYLgxy6VZtbjDklWExWbo=\", false, function () {\n  return [useToast];\n});\n\n_c = Ingredients;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/views/Recipes/Ingredients.js"],"names":["React","useState","useEffect","services","useToast","Ingredients","props","ingredients","setFieldValue","toast","quantity","setQuantity","name","setName","saveIngredient","add","newIngredient","allIngredients","console","log","handleDelete","index","splicedIngredients","filter","item","i","e","target","value","map","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport services from \"services\";\nimport { useToast } from \"components/Toast\";\n\nexport default function Ingredients(props) {\n  const { ingredients, setFieldValue } = props;\n\n  const toast = useToast();\n\n  const [quantity, setQuantity] = useState();\n\n  const [name, setName] = useState();\n\n  const saveIngredient = () => {\n    if (!quantity || !name) {\n      toast.add(\n        \"tr\",\n        \"danger\",\n\n        \"Add recipe quantity and name first\"\n      );\n      return;\n    }\n    let newIngredient = {\n      name: name,\n      quantity: quantity,\n    };\n    let allIngredients = ingredients ? ingredients : [];\n\n    allIngredients = [...allIngredients, newIngredient];\n    console.log(allIngredients);\n    setFieldValue(\"ingredients\", allIngredients);\n    setQuantity(\"\");\n    setName(\"\");\n  };\n\n  const handleDelete = (index) => {\n    let splicedIngredients = ingredients.filter((item, i) => i !== index);\n\n    setFieldValue(\"ingredients\", splicedIngredients);\n  };\n  return (\n    <>\n      <div className=\" ingredients-form-control d-flex\">\n        <input\n          placeholder=\"Quantity\"\n          name=\"quantity\"\n          className=\"quantity\"\n          type=\"text\"\n          onChange={(e) => setQuantity(e.target.value)}\n          value={quantity}\n        />\n        <input\n          placeholder=\"Name\"\n          name=\"ingredient\"\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <span onClick={saveIngredient} className=\"btn btn-success btn-wd\">\n          Add Ingredient\n        </span>\n      </div>\n      {ingredients?.map((item, i) => (\n        <div className=\"recipe-tag-item mt-2\" key={i}>\n          <span className=\"step\">\n            <b style={{ color: \"#253b02\" }}>{item.quantity}:</b> {item.name}\n          </span>\n          <span\n            type=\"button\"\n            className=\"button\"\n            onClick={() => handleDelete(i)}\n          >\n            &times;\n          </span>\n        </div>\n      ))}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}