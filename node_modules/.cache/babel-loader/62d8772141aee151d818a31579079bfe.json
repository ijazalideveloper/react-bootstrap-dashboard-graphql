{"ast":null,"code":"import HTTPClient from \"./http.services\";\n\nclass BannerService {\n  getAllBannersList(page, limit) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/admin/banners?&page=\" + page + \"&limit=\" + limit).then(response => {\n        resolve({\n          response: response.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getAllBannersListWithoutPagination() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/admin/banners\").then(response => {\n        resolve({\n          response: response.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getBannerById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/admin/banners/\" + id).then(response => {\n        resolve({\n          response: response.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  addBanner(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/admin/banners\", obj).then(response => {\n        resolve({\n          response: response.data.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  updateBanner(obj, data) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.put(\"/admin/banners/\" + obj, data).then(response => {\n        resolve({\n          response: response.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  delBanner(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.delete(\"/admin/banners/\" + obj).then(response => {\n        resolve({\n          response: response.data\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n}\n\nexport default new BannerService();","map":{"version":3,"sources":["/Users/sadiqsoomro/Documents/ijaz/aimfit_frontend_upload/src/services/banners.services.js"],"names":["HTTPClient","BannerService","getAllBannersList","page","limit","Promise","resolve","reject","get","then","response","data","catch","err","getAllBannersListWithoutPagination","getBannerById","id","addBanner","obj","post","updateBanner","put","delBanner","delete"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;;AAEA,MAAMC,aAAN,CAAoB;AAElBC,EAAAA,iBAAiB,CAAEC,IAAF,EAAQC,KAAR,EAAe;AAC9B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,MAAAA,UAAU,CAACQ,GAAX,CAAe,0BAAwBL,IAAxB,GAA6B,SAA7B,GAAuCC,KAAtD,EACGK,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC;AAArB,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDC,EAAAA,kCAAkC,GAAG;AACnC,WAAO,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,MAAAA,UAAU,CAACQ,GAAX,CAAe,gBAAf,EACGC,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC;AAArB,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDE,EAAAA,aAAa,CAACC,EAAD,EAAK;AAChB,WAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,MAAAA,UAAU,CAACQ,GAAX,CAAe,oBAAoBQ,EAAnC,EACGP,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC;AAArB,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDI,EAAAA,SAAS,CAACC,GAAD,EAAM;AACb,WAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,MAAAA,UAAU,CAACmB,IAAX,CAAgB,gBAAhB,EAAkCD,GAAlC,EACGT,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAcA;AAA1B,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDO,EAAAA,YAAY,CAACF,GAAD,EAAMP,IAAN,EAAY;AACtB,WAAO,IAAIN,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,MAAAA,UAAU,CAACqB,GAAX,CAAe,oBAAmBH,GAAlC,EAAuCP,IAAvC,EACGF,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC;AAArB,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAEDS,EAAAA,SAAS,CAACJ,GAAD,EAAM;AACb,WAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,MAAAA,UAAU,CAACuB,MAAX,CAAkB,oBAAmBL,GAArC,EACGT,IADH,CACSC,QAAD,IAAc;AAClBJ,QAAAA,OAAO,CAAC;AAAEI,UAAAA,QAAQ,EAAEA,QAAQ,CAACC;AAArB,SAAD,CAAP;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OANH;AAOD,KARM,CAAP;AASD;;AAxEiB;;AA2EpB,eAAe,IAAIZ,aAAJ,EAAf","sourcesContent":["import HTTPClient from \"./http.services\";\n\nclass BannerService {\n\n  getAllBannersList( page, limit) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/admin/banners?&page=\"+page+\"&limit=\"+limit)\n        .then((response) => {\n          resolve({ response: response.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  getAllBannersListWithoutPagination() {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/admin/banners\")\n        .then((response) => {\n          resolve({ response: response.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  getBannerById(id) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.get(\"/admin/banners/\" + id)\n        .then((response) => {\n          resolve({ response: response.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  addBanner(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.post(\"/admin/banners\", obj)\n        .then((response) => {\n          resolve({ response: response.data.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  updateBanner(obj, data) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.put(\"/admin/banners/\"+ obj, data)\n        .then((response) => {\n          resolve({ response: response.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  delBanner(obj) {\n    return new Promise((resolve, reject) => {\n      HTTPClient.delete(\"/admin/banners/\"+ obj)\n        .then((response) => {\n          resolve({ response: response.data });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nexport default new BannerService();\n"]},"metadata":{},"sourceType":"module"}